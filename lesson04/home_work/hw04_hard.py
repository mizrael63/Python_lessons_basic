# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку
print(list(map(list, zip(*matrix))))

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""
from functools import reduce
def az(number):
	number = number.replace('\n', '')
	slv = dict()
	slv2 = dict()
	zz = 0
	slv2 = {}
	for i in range(len(number) -5):
		if not '0' in number[i:i+5]:
			slv[i] = number[i:i+5]
	for key, value in slv.items():
		slv2[key] = reduce(lambda x, y: x * y, (list(map(int, slv[key]))))
	zz = 0
	for key, value in slv2.items():
		if value > zz:
			zz = value
			index = key
	return(index, zz)
print(az(number))


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.
a = input('Введите положение первой фигуры через пробел: ')
b = input('Введите положение второй фигуры через пробел: ')
c = input('Введите положение третьей фигуры через пробел: ')
d = input('Введите положение четвертой фигуры через пробел: ')
e = input('Введите положение пятой фигуры через пробел: ')
f = input('Введите положение шестой фигуры через пробел: ')
g = input('Введите положение седьмой фигуры через пробел: ')
h = input('Введите положение восьмой фигуры через пробел: ')
m = list()
def coordinats(n)
		n = len(n).split(' ')#указываем что пустота не элемент, а разделитель элементов
	#строки
#убираем лишнее смещение и превращаем точку 1 1 в начало координат 0-0
#в принципе не обязательно, но для расчетов удобнее
		x = int(n[0])-1 #получили координату x для входящего числа
		y = int(n[1])-1 #получили кооринату y
		b=x+y #уравнение вида y=kx+b при фиксированном шаге в 45 градусов
		#перестает нуждаться в коэффициенте k и вырождается в уравнение вида y=x+b
		#поэтому в итоге у нас получается два уравнения y = -x +b и y = x +b
		b2=y-x
		f = [b, b2]
		return f
a = coordinats(a)
b = coordinats(b)
c = coordinats(c)
d = coordinats(d)
e = coordinats(e)
f = coordinats(f)
g = coordinats(g)
h = coordinats(h)
m.append(a, b, c, d, e, f, g, h)
#В итоге получили один общий массив данных которые надо попарно проверить
#можно было конечно китайский код включить и всё перечислить, но тут 28
#уникальных сочетаний
c=0
def proverka(a,b)
if a[0]==b[0] or a[1]==b[1]:
	return c=1
else: c=0
if proverka(m[0],m[1])=1:
			print('Есть пересечение ферзей')
else: if proverka(m[0],m[2])=1:
			print("Есть пересечение ферзей")
#и так все 28 раз. пока не могу сообразить как сделать автоматически, до посленего
			else:
			print("Пересечений ферзей нет")
		
